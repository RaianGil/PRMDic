using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using EPolicy;
using EPolicy.TaskControl;
using System.Xml;
using EPolicy.XmlCooker;
using Baldrich.DBRequest;

namespace EPolicy
{
	/// <summary>
	/// Summary description for ViewCommission.
	/// </summary>
    public partial class ViewCommission : System.Web.UI.Page
    {
        private DataTable DtTask;

        #region Web Form Designer generated code
        override protected void OnInit(EventArgs e)
        {
            //
            // CODEGEN: This call is required by the ASP.NET Web Form Designer.
            //
            InitializeComponent();
            base.OnInit(e);

            Control Banner = new Control();
            Banner = LoadControl(@"TopBanner.ascx");
            this.Placeholder1.Controls.Add(Banner);

            //Setup Left-side Banner
            Control LeftMenu = new Control();
            LeftMenu = LoadControl(@"LeftMenu.ascx");
            this.phTopBanner1.Controls.Add(LeftMenu);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.searchIndividual.ItemDataBound += new System.Web.UI.WebControls.DataGridItemEventHandler(this.searchIndividual_ItemDataBound);

        }
        #endregion

        protected void Page_Load(object sender, System.EventArgs e)
        {
            Login.Login cp = HttpContext.Current.User as Login.Login;
            if (cp == null)
            {
                Response.Redirect("Default.aspx?001");
            }
            else
            {
                if (!cp.IsInRole("VIEWCOMMISSION") && !cp.IsInRole("ADMINISTRATOR"))
                {
                    Response.Redirect("Default.aspx?001");
                }
            }

            if (!IsPostBack)
            {
                this.SetReferringPage();

                TaskControl.Policy taskControl;
                if (Session["TaskControlCommission"] != null)
                {
                    taskControl = (TaskControl.Policy)Session["TaskControlCommission"];
                }
                else
                {
                    taskControl = (TaskControl.Policy)Session["TaskControl"];
                    Session.Add("TaskControlCommission", taskControl);
                }

                LblCustomerName.Text = "Policy No.: " + taskControl.PolicyType.Trim() + " " + taskControl.PolicyNo.Trim() + " " + taskControl.Certificate.Trim() + " " + taskControl.Suffix.Trim();

                FillDataGrid();
                FillTextControl();
            }
        }

        private string ReferringPage
        {
            get
            {
                return ((ViewState["referringPage"] != null) ?
                    ViewState["referringPage"].ToString() : "");
            }
            set
            {
                ViewState["referringPage"] = value;
            }
        }

        private void SetReferringPage()
        {
            if ((Session["FromPage"] != null) && (Session["FromPage"].ToString() != ""))
            {
                this.ReferringPage = Session["FromPage"].ToString();
                Session.Remove("FromPage");
            }
        }

        private void ReturnToReferringPage()
        {
            if (this.ReferringPage != "")
            {
                Response.Redirect(this.ReferringPage);
            }
            Response.Redirect("HomePage.aspx");
        }

        private void FillTextControl()
        {
            TaskControl.Policy taskControl = (TaskControl.Policy)Session["TaskControlCommission"];

            DataTable agentComm = TaskControl.Policy.ObtainAgentPercent(taskControl.Agent, taskControl.PolicyType.Substring(0,2));

            TxtCommPercent.Enabled = false;
            TxtCommAmt.Enabled = false;

            LblStatus.Text = taskControl.Status;

            double commPercent = double.Parse(taskControl.CommissionAgencyPercent);
            commPercent = double.Parse(agentComm.Rows[0][7].ToString())/10;//commPercent / 10;
            TxtCommPercent.Text = commPercent.ToString();
            commPercent = commPercent / 100;
            TxtCommPercent.Text = TxtCommPercent.Text.Trim() + "%";
            TxtCommAmt.Text = (taskControl.TotalPremium * commPercent).ToString("###,##0.00");//int.Parse(agentComm.Rows[0][12].ToString()).ToString("###,##0.00");//taskControl.CommissionAgency.ToString("###,##0.00");
            txtCheckNumber.Text = taskControl.CheckNumber.ToString();
            txtCheckDate.Text = taskControl.CheckDate.ToString();
            txtCheckAmount.Text = taskControl.CheckAmount.ToString("###,#0.00");
        }

        private void FillDataGrid()
        {
            TaskControl.Policy taskControl = (TaskControl.Policy)Session["TaskControlCommission"];

            LblError.Visible = false;
            searchIndividual.DataSource = null;
            DtTask = null;

            DtTask = taskControl.AgentSelectedTable;

            Session.Remove("DtTask");
            Session.Add("DtTask", DtTask);

            if (DtTask.Rows.Count != 0)
            {
                searchIndividual.DataSource = DtTask;
                searchIndividual.DataBind();
            }
            else
            {
                searchIndividual.DataSource = null;
                searchIndividual.DataBind();

                //LblError.Visible = true;
                LblError.Text = "Could not find a match for your search criteria, please try again.";
            }

            LblTotalCases.Text = "Total Cases: " + DtTask.Rows.Count.ToString();
        }

        private void searchIndividual_ItemDataBound(object sender, System.Web.UI.WebControls.DataGridItemEventArgs e)
        {
            TaskControl.Policy taskControl = (TaskControl.Policy)Session["TaskControlCommission"];
            DataTable dtCol = taskControl.AgentSelectedTable;

            DataColumnCollection dc = dtCol.Columns;

            if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
            {
                DateTime CommissionDateField;
                double CommissionPercentField;

                if (DataBinder.Eval(e.Item.DataItem, "CommissionDate") != "" &&
                    DataBinder.Eval(e.Item.DataItem, "CommissionDate") != System.DBNull.Value)
                {
                    CommissionDateField = Convert.ToDateTime(DataBinder.Eval(e.Item.DataItem, "CommissionDate", "{0:MM/dd/yyyy}"));
                    e.Item.Cells[4].Text = CommissionDateField.ToShortDateString();
                }

                if (DataBinder.Eval(e.Item.DataItem, "CommissionAgentPercent") != "")
                {
                    if (DataBinder.Eval(e.Item.DataItem, "CommissionAgentPercent") != System.DBNull.Value)
                    {
                        double commPerc = Convert.ToDouble(DataBinder.Eval(e.Item.DataItem, "CommissionAgentPercent"));
                        commPerc = commPerc / 10;
                        CommissionPercentField = commPerc;
                        e.Item.Cells[5].Text = CommissionPercentField.ToString().Trim() + "%";
                    }
                }
            }
        }

        protected void btnClose_Click(object sender, System.EventArgs e)
        {
            if (btnClose.Text == "Exit")
                ReturnToReferringPage();
            else
            {
                FillTextControl();
                txtCheckNumber.Enabled = false;
                txtCheckDate.Enabled = false;
                txtCheckAmount.Enabled = false;
                btnEdit.Visible = true;
                btnUpdate.Visible = false;
                btnClose.Text = "Exit";
            }
        }

        protected void btnUpdate_Click(object sender, EventArgs e)
        {

            Baldrich.DBRequest.DBRequest Executor = new Baldrich.DBRequest.DBRequest();
            try
            {
                Executor.BeginTrans();
                Executor.Update("UpdateViewComission", this.GetUpdateViewComissionXml());
                Executor.CommitTrans();

                TaskControl.Policy taskControl = (TaskControl.Policy)Session["TaskControl"];
                taskControl.CheckNumber = txtCheckNumber.Text.Trim();
                taskControl.CheckDate = txtCheckDate.Text.Trim();

                if (txtCheckAmount.Text.Trim() == "")
                    txtCheckAmount.Text = "0.0";

                taskControl.CheckAmount = double.Parse(txtCheckAmount.Text.Trim());

                txtCheckNumber.Enabled = false;
                txtCheckDate.Enabled = false;
                txtCheckAmount.Enabled = false;
                btnEdit.Visible = true;
                btnUpdate.Visible = false;
                btnClose.Text = "Exit";


                this.litPopUp.Text = Utilities.MakeLiteralPopUpString("Update saved successfully.");
                this.litPopUp.Visible = true;

            }
            catch (Exception xcp)
            {
                Executor.RollBackTrans();
                throw new Exception("Error while trying to update new fields." + xcp.Message, xcp);
            }
        }

        private XmlDocument GetUpdateViewComissionXml()
        {
            DbRequestXmlCookRequestItem[] cookItems = 
                new DbRequestXmlCookRequestItem[4];

            TaskControl.TaskControl taskControl = (TaskControl.TaskControl)Session["TaskControl"];

            DbRequestXmlCooker.AttachCookItem("TaskControlID", SqlDbType.Int, 0, taskControl.TaskControlID.ToString(), ref cookItems);
            DbRequestXmlCooker.AttachCookItem("CheckNumber", SqlDbType.VarChar, 20, txtCheckNumber.Text.Trim(), ref cookItems);
            DbRequestXmlCooker.AttachCookItem("CheckDate", SqlDbType.VarChar, 20, txtCheckDate.Text.Trim(), ref cookItems);
            DbRequestXmlCooker.AttachCookItem("CheckAmount", SqlDbType.Float, 0, txtCheckAmount.Text.Trim(), ref cookItems);
            XmlDocument xmlDoc;

            try
            {
                xmlDoc = DbRequestXmlCooker.Cook(cookItems);
            }
            catch (Exception ex)
            {
                throw new Exception("Could not cook items.", ex);
            }

            return xmlDoc;
        }

        protected void btnEdit_Click(object sender, EventArgs e)
        {
            if (txtCheckAmount.Text == "0.00" && txtCheckAmount.Text != TxtCommAmt.Text)
                txtCheckAmount.Text = TxtCommAmt.Text;

            btnUpdate.Visible = true;
            txtCheckAmount.Enabled = true;
            txtCheckDate.Enabled = true;
            txtCheckNumber.Enabled = true;
            btnEdit.Visible = false;
            btnClose.Text = "Cancel";
        }
}
}
