//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DataSet_2005 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GetReportLaboratoryPolicy")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GetReportLaboratoryPolicy : global::System.Data.DataSet {
        
        private GetReportLaboratoryPolicyDataTable tableGetReportLaboratoryPolicy;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetReportLaboratoryPolicy() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GetReportLaboratoryPolicy(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetReportLaboratoryPolicy"] != null)) {
                    base.Tables.Add(new GetReportLaboratoryPolicyDataTable(ds.Tables["GetReportLaboratoryPolicy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetReportLaboratoryPolicyDataTable _GetReportLaboratoryPolicy {
            get {
                return this.tableGetReportLaboratoryPolicy;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GetReportLaboratoryPolicy cln = ((GetReportLaboratoryPolicy)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetReportLaboratoryPolicy"] != null)) {
                    base.Tables.Add(new GetReportLaboratoryPolicyDataTable(ds.Tables["GetReportLaboratoryPolicy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetReportLaboratoryPolicy = ((GetReportLaboratoryPolicyDataTable)(base.Tables["GetReportLaboratoryPolicy"]));
            if ((initTable == true)) {
                if ((this.tableGetReportLaboratoryPolicy != null)) {
                    this.tableGetReportLaboratoryPolicy.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GetReportLaboratoryPolicy";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GetReportLaboratoryPolicy.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetReportLaboratoryPolicy = new GetReportLaboratoryPolicyDataTable();
            base.Tables.Add(this.tableGetReportLaboratoryPolicy);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_GetReportLaboratoryPolicy() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GetReportLaboratoryPolicy ds = new GetReportLaboratoryPolicy();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GetReportLaboratoryPolicyRowChangeEventHandler(object sender, GetReportLaboratoryPolicyRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetReportLaboratoryPolicyDataTable : global::System.Data.TypedTableBase<GetReportLaboratoryPolicyRow> {
            
            private global::System.Data.DataColumn columnPolicyNo;
            
            private global::System.Data.DataColumn columnPolicyType;
            
            private global::System.Data.DataColumn columnTaskControlID;
            
            private global::System.Data.DataColumn columnInsuredName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnZipCode;
            
            private global::System.Data.DataColumn columnEffectiveDate;
            
            private global::System.Data.DataColumn columnExpirationDate;
            
            private global::System.Data.DataColumn columnEntryDate;
            
            private global::System.Data.DataColumn columnAgency;
            
            private global::System.Data.DataColumn columnProducer;
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnCoverage;
            
            private global::System.Data.DataColumn columnSpecialtyDesc;
            
            private global::System.Data.DataColumn columnRetroDate;
            
            private global::System.Data.DataColumn columnLimit;
            
            private global::System.Data.DataColumn columnFinancialDesc;
            
            private global::System.Data.DataColumn columnFinancialDescPolicy;
            
            private global::System.Data.DataColumn columnGrossReceipts;
            
            private global::System.Data.DataColumn columnFactor;
            
            private global::System.Data.DataColumn columnTotalPremium;
            
            private global::System.Data.DataColumn columnTotalPremium100300;
            
            private global::System.Data.DataColumn columnTotalPremium250500;
            
            private global::System.Data.DataColumn columnTotalPremium5001000;
            
            private global::System.Data.DataColumn columnTotalPremium10003000;
            
            private global::System.Data.DataColumn columnCharge;
            
            private global::System.Data.DataColumn columnPremium;
            
            private global::System.Data.DataColumn columnCommment;
            
            private global::System.Data.DataColumn columnTerm;
            
            private global::System.Data.DataColumn columnAnniversary;
            
            private global::System.Data.DataColumn columnMedicalLimit;
            
            private global::System.Data.DataColumn columnAggregateLimit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetReportLaboratoryPolicyDataTable() {
                this.TableName = "GetReportLaboratoryPolicy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetReportLaboratoryPolicyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetReportLaboratoryPolicyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PolicyNoColumn {
                get {
                    return this.columnPolicyNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PolicyTypeColumn {
                get {
                    return this.columnPolicyType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaskControlIDColumn {
                get {
                    return this.columnTaskControlID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuredNameColumn {
                get {
                    return this.columnInsuredName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZipCodeColumn {
                get {
                    return this.columnZipCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveDateColumn {
                get {
                    return this.columnEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpirationDateColumn {
                get {
                    return this.columnExpirationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntryDateColumn {
                get {
                    return this.columnEntryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgencyColumn {
                get {
                    return this.columnAgency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProducerColumn {
                get {
                    return this.columnProducer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoverageColumn {
                get {
                    return this.columnCoverage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecialtyDescColumn {
                get {
                    return this.columnSpecialtyDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RetroDateColumn {
                get {
                    return this.columnRetroDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LimitColumn {
                get {
                    return this.columnLimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinancialDescColumn {
                get {
                    return this.columnFinancialDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinancialDescPolicyColumn {
                get {
                    return this.columnFinancialDescPolicy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossReceiptsColumn {
                get {
                    return this.columnGrossReceipts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactorColumn {
                get {
                    return this.columnFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPremiumColumn {
                get {
                    return this.columnTotalPremium;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPremium100300Column {
                get {
                    return this.columnTotalPremium100300;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPremium250500Column {
                get {
                    return this.columnTotalPremium250500;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPremium5001000Column {
                get {
                    return this.columnTotalPremium5001000;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPremium10003000Column {
                get {
                    return this.columnTotalPremium10003000;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChargeColumn {
                get {
                    return this.columnCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiumColumn {
                get {
                    return this.columnPremium;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommmentColumn {
                get {
                    return this.columnCommment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TermColumn {
                get {
                    return this.columnTerm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnniversaryColumn {
                get {
                    return this.columnAnniversary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MedicalLimitColumn {
                get {
                    return this.columnMedicalLimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AggregateLimitColumn {
                get {
                    return this.columnAggregateLimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetReportLaboratoryPolicyRow this[int index] {
                get {
                    return ((GetReportLaboratoryPolicyRow)(this.Rows[index]));
                }
            }
            
            public event GetReportLaboratoryPolicyRowChangeEventHandler GetReportLaboratoryPolicyRowChanging;
            
            public event GetReportLaboratoryPolicyRowChangeEventHandler GetReportLaboratoryPolicyRowChanged;
            
            public event GetReportLaboratoryPolicyRowChangeEventHandler GetReportLaboratoryPolicyRowDeleting;
            
            public event GetReportLaboratoryPolicyRowChangeEventHandler GetReportLaboratoryPolicyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetReportLaboratoryPolicyRow(GetReportLaboratoryPolicyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetReportLaboratoryPolicyRow AddGetReportLaboratoryPolicyRow(
                        string PolicyNo, 
                        string PolicyType, 
                        int TaskControlID, 
                        string InsuredName, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        string State, 
                        string ZipCode, 
                        System.DateTime EffectiveDate, 
                        System.DateTime ExpirationDate, 
                        System.DateTime EntryDate, 
                        string Agency, 
                        string Producer, 
                        string Code, 
                        string Coverage, 
                        string SpecialtyDesc, 
                        string RetroDate, 
                        string Limit, 
                        string FinancialDesc, 
                        string FinancialDescPolicy, 
                        double GrossReceipts, 
                        double Factor, 
                        double TotalPremium, 
                        double TotalPremium100300, 
                        double TotalPremium250500, 
                        double TotalPremium5001000, 
                        double TotalPremium10003000, 
                        double Charge, 
                        double Premium, 
                        string Commment, 
                        int Term, 
                        string Anniversary, 
                        string MedicalLimit, 
                        string AggregateLimit) {
                GetReportLaboratoryPolicyRow rowGetReportLaboratoryPolicyRow = ((GetReportLaboratoryPolicyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PolicyNo,
                        PolicyType,
                        TaskControlID,
                        InsuredName,
                        Address1,
                        Address2,
                        City,
                        State,
                        ZipCode,
                        EffectiveDate,
                        ExpirationDate,
                        EntryDate,
                        Agency,
                        Producer,
                        Code,
                        Coverage,
                        SpecialtyDesc,
                        RetroDate,
                        Limit,
                        FinancialDesc,
                        FinancialDescPolicy,
                        GrossReceipts,
                        Factor,
                        TotalPremium,
                        TotalPremium100300,
                        TotalPremium250500,
                        TotalPremium5001000,
                        TotalPremium10003000,
                        Charge,
                        Premium,
                        Commment,
                        Term,
                        Anniversary,
                        MedicalLimit,
                        AggregateLimit};
                rowGetReportLaboratoryPolicyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGetReportLaboratoryPolicyRow);
                return rowGetReportLaboratoryPolicyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GetReportLaboratoryPolicyDataTable cln = ((GetReportLaboratoryPolicyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GetReportLaboratoryPolicyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPolicyNo = base.Columns["PolicyNo"];
                this.columnPolicyType = base.Columns["PolicyType"];
                this.columnTaskControlID = base.Columns["TaskControlID"];
                this.columnInsuredName = base.Columns["InsuredName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnEffectiveDate = base.Columns["EffectiveDate"];
                this.columnExpirationDate = base.Columns["ExpirationDate"];
                this.columnEntryDate = base.Columns["EntryDate"];
                this.columnAgency = base.Columns["Agency"];
                this.columnProducer = base.Columns["Producer"];
                this.columnCode = base.Columns["Code"];
                this.columnCoverage = base.Columns["Coverage"];
                this.columnSpecialtyDesc = base.Columns["SpecialtyDesc"];
                this.columnRetroDate = base.Columns["RetroDate"];
                this.columnLimit = base.Columns["Limit"];
                this.columnFinancialDesc = base.Columns["FinancialDesc"];
                this.columnFinancialDescPolicy = base.Columns["FinancialDescPolicy"];
                this.columnGrossReceipts = base.Columns["GrossReceipts"];
                this.columnFactor = base.Columns["Factor"];
                this.columnTotalPremium = base.Columns["TotalPremium"];
                this.columnTotalPremium100300 = base.Columns["TotalPremium100300"];
                this.columnTotalPremium250500 = base.Columns["TotalPremium250500"];
                this.columnTotalPremium5001000 = base.Columns["TotalPremium5001000"];
                this.columnTotalPremium10003000 = base.Columns["TotalPremium10003000"];
                this.columnCharge = base.Columns["Charge"];
                this.columnPremium = base.Columns["Premium"];
                this.columnCommment = base.Columns["Commment"];
                this.columnTerm = base.Columns["Term"];
                this.columnAnniversary = base.Columns["Anniversary"];
                this.columnMedicalLimit = base.Columns["MedicalLimit"];
                this.columnAggregateLimit = base.Columns["AggregateLimit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPolicyNo = new global::System.Data.DataColumn("PolicyNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPolicyNo);
                this.columnPolicyType = new global::System.Data.DataColumn("PolicyType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPolicyType);
                this.columnTaskControlID = new global::System.Data.DataColumn("TaskControlID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaskControlID);
                this.columnInsuredName = new global::System.Data.DataColumn("InsuredName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuredName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnZipCode = new global::System.Data.DataColumn("ZipCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnEffectiveDate = new global::System.Data.DataColumn("EffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveDate);
                this.columnExpirationDate = new global::System.Data.DataColumn("ExpirationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpirationDate);
                this.columnEntryDate = new global::System.Data.DataColumn("EntryDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntryDate);
                this.columnAgency = new global::System.Data.DataColumn("Agency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgency);
                this.columnProducer = new global::System.Data.DataColumn("Producer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProducer);
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnCoverage = new global::System.Data.DataColumn("Coverage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoverage);
                this.columnSpecialtyDesc = new global::System.Data.DataColumn("SpecialtyDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecialtyDesc);
                this.columnRetroDate = new global::System.Data.DataColumn("RetroDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetroDate);
                this.columnLimit = new global::System.Data.DataColumn("Limit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLimit);
                this.columnFinancialDesc = new global::System.Data.DataColumn("FinancialDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinancialDesc);
                this.columnFinancialDescPolicy = new global::System.Data.DataColumn("FinancialDescPolicy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinancialDescPolicy);
                this.columnGrossReceipts = new global::System.Data.DataColumn("GrossReceipts", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossReceipts);
                this.columnFactor = new global::System.Data.DataColumn("Factor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactor);
                this.columnTotalPremium = new global::System.Data.DataColumn("TotalPremium", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPremium);
                this.columnTotalPremium100300 = new global::System.Data.DataColumn("TotalPremium100300", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPremium100300);
                this.columnTotalPremium250500 = new global::System.Data.DataColumn("TotalPremium250500", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPremium250500);
                this.columnTotalPremium5001000 = new global::System.Data.DataColumn("TotalPremium5001000", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPremium5001000);
                this.columnTotalPremium10003000 = new global::System.Data.DataColumn("TotalPremium10003000", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPremium10003000);
                this.columnCharge = new global::System.Data.DataColumn("Charge", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCharge);
                this.columnPremium = new global::System.Data.DataColumn("Premium", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremium);
                this.columnCommment = new global::System.Data.DataColumn("Commment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommment);
                this.columnTerm = new global::System.Data.DataColumn("Term", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTerm);
                this.columnAnniversary = new global::System.Data.DataColumn("Anniversary", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnniversary);
                this.columnMedicalLimit = new global::System.Data.DataColumn("MedicalLimit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMedicalLimit);
                this.columnAggregateLimit = new global::System.Data.DataColumn("AggregateLimit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAggregateLimit);
                this.columnPolicyNo.ReadOnly = true;
                this.columnPolicyNo.MaxLength = 11;
                this.columnPolicyType.ReadOnly = true;
                this.columnPolicyType.MaxLength = 4;
                this.columnTaskControlID.ReadOnly = true;
                this.columnInsuredName.ReadOnly = true;
                this.columnInsuredName.MaxLength = 200;
                this.columnAddress1.ReadOnly = true;
                this.columnAddress1.MaxLength = 60;
                this.columnAddress2.ReadOnly = true;
                this.columnAddress2.MaxLength = 60;
                this.columnCity.ReadOnly = true;
                this.columnCity.MaxLength = 14;
                this.columnState.ReadOnly = true;
                this.columnState.MaxLength = 2;
                this.columnZipCode.ReadOnly = true;
                this.columnZipCode.MaxLength = 10;
                this.columnEffectiveDate.ReadOnly = true;
                this.columnExpirationDate.ReadOnly = true;
                this.columnEntryDate.ReadOnly = true;
                this.columnAgency.ReadOnly = true;
                this.columnAgency.MaxLength = 30;
                this.columnProducer.ReadOnly = true;
                this.columnProducer.MaxLength = 30;
                this.columnCode.ReadOnly = true;
                this.columnCode.MaxLength = 10;
                this.columnCoverage.ReadOnly = true;
                this.columnCoverage.MaxLength = 25;
                this.columnSpecialtyDesc.ReadOnly = true;
                this.columnSpecialtyDesc.MaxLength = 100;
                this.columnRetroDate.ReadOnly = true;
                this.columnRetroDate.MaxLength = 25;
                this.columnLimit.ReadOnly = true;
                this.columnLimit.MaxLength = 50;
                this.columnFinancialDesc.ReadOnly = true;
                this.columnFinancialDesc.MaxLength = 100;
                this.columnFinancialDescPolicy.ReadOnly = true;
                this.columnFinancialDescPolicy.MaxLength = 100;
                this.columnGrossReceipts.ReadOnly = true;
                this.columnFactor.ReadOnly = true;
                this.columnTotalPremium.ReadOnly = true;
                this.columnTotalPremium100300.ReadOnly = true;
                this.columnTotalPremium250500.ReadOnly = true;
                this.columnTotalPremium5001000.ReadOnly = true;
                this.columnTotalPremium10003000.ReadOnly = true;
                this.columnCharge.ReadOnly = true;
                this.columnPremium.ReadOnly = true;
                this.columnCommment.ReadOnly = true;
                this.columnCommment.MaxLength = 1000;
                this.columnTerm.ReadOnly = true;
                this.columnAnniversary.ReadOnly = true;
                this.columnAnniversary.MaxLength = 2;
                this.columnMedicalLimit.ReadOnly = true;
                this.columnMedicalLimit.MaxLength = 100;
                this.columnAggregateLimit.ReadOnly = true;
                this.columnAggregateLimit.MaxLength = 100;
                this.ExtendedProperties.Add("Generator_TablePropName", "_GetReportLaboratoryPolicy");
                this.ExtendedProperties.Add("Generator_UserTableName", "GetReportLaboratoryPolicy");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetReportLaboratoryPolicyRow NewGetReportLaboratoryPolicyRow() {
                return ((GetReportLaboratoryPolicyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GetReportLaboratoryPolicyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GetReportLaboratoryPolicyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetReportLaboratoryPolicyRowChanged != null)) {
                    this.GetReportLaboratoryPolicyRowChanged(this, new GetReportLaboratoryPolicyRowChangeEvent(((GetReportLaboratoryPolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetReportLaboratoryPolicyRowChanging != null)) {
                    this.GetReportLaboratoryPolicyRowChanging(this, new GetReportLaboratoryPolicyRowChangeEvent(((GetReportLaboratoryPolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetReportLaboratoryPolicyRowDeleted != null)) {
                    this.GetReportLaboratoryPolicyRowDeleted(this, new GetReportLaboratoryPolicyRowChangeEvent(((GetReportLaboratoryPolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetReportLaboratoryPolicyRowDeleting != null)) {
                    this.GetReportLaboratoryPolicyRowDeleting(this, new GetReportLaboratoryPolicyRowChangeEvent(((GetReportLaboratoryPolicyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetReportLaboratoryPolicyRow(GetReportLaboratoryPolicyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GetReportLaboratoryPolicy ds = new GetReportLaboratoryPolicy();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetReportLaboratoryPolicyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetReportLaboratoryPolicyRow : global::System.Data.DataRow {
            
            private GetReportLaboratoryPolicyDataTable tableGetReportLaboratoryPolicy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetReportLaboratoryPolicyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetReportLaboratoryPolicy = ((GetReportLaboratoryPolicyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PolicyNo {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.PolicyNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PolicyNo\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.PolicyNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PolicyType {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.PolicyTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PolicyType\' in table \'GetReportLaboratoryPolicy\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.PolicyTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TaskControlID {
                get {
                    try {
                        return ((int)(this[this.tableGetReportLaboratoryPolicy.TaskControlIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaskControlID\' in table \'GetReportLaboratoryPolicy\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.TaskControlIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuredName {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.InsuredNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuredName\' in table \'GetReportLaboratoryPolicy\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.InsuredNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZipCode {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.ZipCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZipCode\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.ZipCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetReportLaboratoryPolicy.EffectiveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveDate\' in table \'GetReportLaboratoryPolicy\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.EffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ExpirationDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetReportLaboratoryPolicy.ExpirationDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpirationDate\' in table \'GetReportLaboratoryPolicy\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.ExpirationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EntryDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGetReportLaboratoryPolicy.EntryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntryDate\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.EntryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Agency {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.AgencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Agency\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.AgencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Producer {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.ProducerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Producer\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.ProducerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Code\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Coverage {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.CoverageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Coverage\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.CoverageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpecialtyDesc {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.SpecialtyDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecialtyDesc\' in table \'GetReportLaboratoryPolicy\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.SpecialtyDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RetroDate {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.RetroDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RetroDate\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.RetroDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Limit {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.LimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Limit\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.LimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinancialDesc {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.FinancialDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinancialDesc\' in table \'GetReportLaboratoryPolicy\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.FinancialDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FinancialDescPolicy {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.FinancialDescPolicyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinancialDescPolicy\' in table \'GetReportLaboratoryPolicy\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.FinancialDescPolicyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GrossReceipts {
                get {
                    try {
                        return ((double)(this[this.tableGetReportLaboratoryPolicy.GrossReceiptsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossReceipts\' in table \'GetReportLaboratoryPolicy\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.GrossReceiptsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Factor {
                get {
                    try {
                        return ((double)(this[this.tableGetReportLaboratoryPolicy.FactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Factor\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.FactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalPremium {
                get {
                    try {
                        return ((double)(this[this.tableGetReportLaboratoryPolicy.TotalPremiumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPremium\' in table \'GetReportLaboratoryPolicy\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.TotalPremiumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalPremium100300 {
                get {
                    try {
                        return ((double)(this[this.tableGetReportLaboratoryPolicy.TotalPremium100300Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPremium100300\' in table \'GetReportLaboratoryPolicy\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.TotalPremium100300Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalPremium250500 {
                get {
                    try {
                        return ((double)(this[this.tableGetReportLaboratoryPolicy.TotalPremium250500Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPremium250500\' in table \'GetReportLaboratoryPolicy\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.TotalPremium250500Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalPremium5001000 {
                get {
                    try {
                        return ((double)(this[this.tableGetReportLaboratoryPolicy.TotalPremium5001000Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPremium5001000\' in table \'GetReportLaboratoryPolicy\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.TotalPremium5001000Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalPremium10003000 {
                get {
                    try {
                        return ((double)(this[this.tableGetReportLaboratoryPolicy.TotalPremium10003000Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPremium10003000\' in table \'GetReportLaboratoryPolicy\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.TotalPremium10003000Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Charge {
                get {
                    try {
                        return ((double)(this[this.tableGetReportLaboratoryPolicy.ChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Charge\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.ChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Premium {
                get {
                    try {
                        return ((double)(this[this.tableGetReportLaboratoryPolicy.PremiumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Premium\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.PremiumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Commment {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.CommmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Commment\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.CommmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Term {
                get {
                    try {
                        return ((int)(this[this.tableGetReportLaboratoryPolicy.TermColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Term\' in table \'GetReportLaboratoryPolicy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.TermColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Anniversary {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.AnniversaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Anniversary\' in table \'GetReportLaboratoryPolicy\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.AnniversaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MedicalLimit {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.MedicalLimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MedicalLimit\' in table \'GetReportLaboratoryPolicy\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.MedicalLimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AggregateLimit {
                get {
                    try {
                        return ((string)(this[this.tableGetReportLaboratoryPolicy.AggregateLimitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AggregateLimit\' in table \'GetReportLaboratoryPolicy\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGetReportLaboratoryPolicy.AggregateLimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPolicyNoNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.PolicyNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPolicyNoNull() {
                this[this.tableGetReportLaboratoryPolicy.PolicyNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPolicyTypeNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.PolicyTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPolicyTypeNull() {
                this[this.tableGetReportLaboratoryPolicy.PolicyTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaskControlIDNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.TaskControlIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaskControlIDNull() {
                this[this.tableGetReportLaboratoryPolicy.TaskControlIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuredNameNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.InsuredNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuredNameNull() {
                this[this.tableGetReportLaboratoryPolicy.InsuredNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableGetReportLaboratoryPolicy.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableGetReportLaboratoryPolicy.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableGetReportLaboratoryPolicy.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableGetReportLaboratoryPolicy.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipCodeNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.ZipCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipCodeNull() {
                this[this.tableGetReportLaboratoryPolicy.ZipCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveDateNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.EffectiveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveDateNull() {
                this[this.tableGetReportLaboratoryPolicy.EffectiveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpirationDateNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.ExpirationDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpirationDateNull() {
                this[this.tableGetReportLaboratoryPolicy.ExpirationDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntryDateNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.EntryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntryDateNull() {
                this[this.tableGetReportLaboratoryPolicy.EntryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgencyNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.AgencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgencyNull() {
                this[this.tableGetReportLaboratoryPolicy.AgencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProducerNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.ProducerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProducerNull() {
                this[this.tableGetReportLaboratoryPolicy.ProducerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tableGetReportLaboratoryPolicy.CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoverageNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.CoverageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoverageNull() {
                this[this.tableGetReportLaboratoryPolicy.CoverageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecialtyDescNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.SpecialtyDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecialtyDescNull() {
                this[this.tableGetReportLaboratoryPolicy.SpecialtyDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetroDateNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.RetroDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetroDateNull() {
                this[this.tableGetReportLaboratoryPolicy.RetroDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLimitNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.LimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLimitNull() {
                this[this.tableGetReportLaboratoryPolicy.LimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinancialDescNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.FinancialDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinancialDescNull() {
                this[this.tableGetReportLaboratoryPolicy.FinancialDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinancialDescPolicyNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.FinancialDescPolicyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinancialDescPolicyNull() {
                this[this.tableGetReportLaboratoryPolicy.FinancialDescPolicyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossReceiptsNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.GrossReceiptsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossReceiptsNull() {
                this[this.tableGetReportLaboratoryPolicy.GrossReceiptsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactorNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.FactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactorNull() {
                this[this.tableGetReportLaboratoryPolicy.FactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPremiumNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.TotalPremiumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPremiumNull() {
                this[this.tableGetReportLaboratoryPolicy.TotalPremiumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPremium100300Null() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.TotalPremium100300Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPremium100300Null() {
                this[this.tableGetReportLaboratoryPolicy.TotalPremium100300Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPremium250500Null() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.TotalPremium250500Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPremium250500Null() {
                this[this.tableGetReportLaboratoryPolicy.TotalPremium250500Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPremium5001000Null() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.TotalPremium5001000Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPremium5001000Null() {
                this[this.tableGetReportLaboratoryPolicy.TotalPremium5001000Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPremium10003000Null() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.TotalPremium10003000Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPremium10003000Null() {
                this[this.tableGetReportLaboratoryPolicy.TotalPremium10003000Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChargeNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.ChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChargeNull() {
                this[this.tableGetReportLaboratoryPolicy.ChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPremiumNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.PremiumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPremiumNull() {
                this[this.tableGetReportLaboratoryPolicy.PremiumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommmentNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.CommmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommmentNull() {
                this[this.tableGetReportLaboratoryPolicy.CommmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTermNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.TermColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTermNull() {
                this[this.tableGetReportLaboratoryPolicy.TermColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnniversaryNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.AnniversaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnniversaryNull() {
                this[this.tableGetReportLaboratoryPolicy.AnniversaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMedicalLimitNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.MedicalLimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMedicalLimitNull() {
                this[this.tableGetReportLaboratoryPolicy.MedicalLimitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAggregateLimitNull() {
                return this.IsNull(this.tableGetReportLaboratoryPolicy.AggregateLimitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAggregateLimitNull() {
                this[this.tableGetReportLaboratoryPolicy.AggregateLimitColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetReportLaboratoryPolicyRowChangeEvent : global::System.EventArgs {
            
            private GetReportLaboratoryPolicyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetReportLaboratoryPolicyRowChangeEvent(GetReportLaboratoryPolicyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetReportLaboratoryPolicyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DataSet_2005.GetReportLaboratoryPolicyTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GetReportLaboratoryPolicyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GetReportLaboratoryPolicyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GetReportLaboratoryPolicy";
            tableMapping.ColumnMappings.Add("PolicyNo", "PolicyNo");
            tableMapping.ColumnMappings.Add("PolicyType", "PolicyType");
            tableMapping.ColumnMappings.Add("TaskControlID", "TaskControlID");
            tableMapping.ColumnMappings.Add("InsuredName", "InsuredName");
            tableMapping.ColumnMappings.Add("Address1", "Address1");
            tableMapping.ColumnMappings.Add("Address2", "Address2");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("ZipCode", "ZipCode");
            tableMapping.ColumnMappings.Add("EffectiveDate", "EffectiveDate");
            tableMapping.ColumnMappings.Add("ExpirationDate", "ExpirationDate");
            tableMapping.ColumnMappings.Add("EntryDate", "EntryDate");
            tableMapping.ColumnMappings.Add("Agency", "Agency");
            tableMapping.ColumnMappings.Add("Producer", "Producer");
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("Coverage", "Coverage");
            tableMapping.ColumnMappings.Add("SpecialtyDesc", "SpecialtyDesc");
            tableMapping.ColumnMappings.Add("RetroDate", "RetroDate");
            tableMapping.ColumnMappings.Add("Limit", "Limit");
            tableMapping.ColumnMappings.Add("FinancialDesc", "FinancialDesc");
            tableMapping.ColumnMappings.Add("FinancialDescPolicy", "FinancialDescPolicy");
            tableMapping.ColumnMappings.Add("GrossReceipts", "GrossReceipts");
            tableMapping.ColumnMappings.Add("Factor", "Factor");
            tableMapping.ColumnMappings.Add("TotalPremium", "TotalPremium");
            tableMapping.ColumnMappings.Add("TotalPremium100300", "TotalPremium100300");
            tableMapping.ColumnMappings.Add("TotalPremium250500", "TotalPremium250500");
            tableMapping.ColumnMappings.Add("TotalPremium5001000", "TotalPremium5001000");
            tableMapping.ColumnMappings.Add("TotalPremium10003000", "TotalPremium10003000");
            tableMapping.ColumnMappings.Add("Charge", "Charge");
            tableMapping.ColumnMappings.Add("Premium", "Premium");
            tableMapping.ColumnMappings.Add("Commment", "Commment");
            tableMapping.ColumnMappings.Add("Term", "Term");
            tableMapping.ColumnMappings.Add("Anniversary", "Anniversary");
            tableMapping.ColumnMappings.Add("MedicalLimit", "MedicalLimit");
            tableMapping.ColumnMappings.Add("AggregateLimit", "AggregateLimit");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["PRMDICConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.GetReportLaboratoryPolicy";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TaskControlID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GetReportLaboratoryPolicy.GetReportLaboratoryPolicyDataTable dataTable, global::System.Nullable<int> TaskControlID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((TaskControlID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(TaskControlID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GetReportLaboratoryPolicy.GetReportLaboratoryPolicyDataTable GetData(global::System.Nullable<int> TaskControlID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((TaskControlID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(TaskControlID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            GetReportLaboratoryPolicy.GetReportLaboratoryPolicyDataTable dataTable = new GetReportLaboratoryPolicy.GetReportLaboratoryPolicyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(GetReportLaboratoryPolicy dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(GetReportLaboratoryPolicy dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(GetReportLaboratoryPolicy dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(GetReportLaboratoryPolicy dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591